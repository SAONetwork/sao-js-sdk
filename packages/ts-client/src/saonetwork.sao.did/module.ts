// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgBinding } from "./types/sao/did/tx";
import { MsgUpdate } from "./types/sao/did/tx";
import { MsgUpdatePaymentAddress } from "./types/sao/did/tx";


export { MsgBinding, MsgUpdate, MsgUpdatePaymentAddress };

type sendMsgBindingParams = {
  value: MsgBinding,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParams = {
  value: MsgUpdate,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePaymentAddressParams = {
  value: MsgUpdatePaymentAddress,
  fee?: StdFee,
  memo?: string
};


type msgBindingParams = {
  value: MsgBinding,
};

type msgUpdateParams = {
  value: MsgUpdate,
};

type msgUpdatePaymentAddressParams = {
  value: MsgUpdatePaymentAddress,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgBinding({ value, fee, memo }: sendMsgBindingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBinding: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBinding({ value: MsgBinding.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBinding: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdate({ value, fee, memo }: sendMsgUpdateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdate: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdate({ value: MsgUpdate.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdate: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePaymentAddress({ value, fee, memo }: sendMsgUpdatePaymentAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePaymentAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdatePaymentAddress({ value: MsgUpdatePaymentAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePaymentAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgBinding({ value }: msgBindingParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.did.MsgBinding", value: MsgBinding.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBinding: Could not create message: ' + e.message)
			}
		},
		
		msgUpdate({ value }: msgUpdateParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.did.MsgUpdate", value: MsgUpdate.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdate: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePaymentAddress({ value }: msgUpdatePaymentAddressParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.did.MsgUpdatePaymentAddress", value: MsgUpdatePaymentAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePaymentAddress: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SaonetworkSaoDid: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;